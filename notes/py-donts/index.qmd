---
title: "Py Donts"
description: My notes & review of [Py Donts](https://mathspp.com/books/pydonts) by Rodrigo Girão Serrão 
author: "Tyler Hillery"
date: "2025-02-11"
image: "./cover.png"
filters:
    - social-share
share:
    permalink: "https://tylerhillery.com/notes/py-donts"
    description:
    twitter: true
    facebook: false
    reddit: true
    stumble: false
    tumblr: false
    linkedin: true
    email: true
    mastodon: true
categories: [Technical Books, On Hold]
jupyter: python3
draft: true
---

------------------------------------------------------------------------

# Notes

## Zip Up

- `zip` goes until the shortest of the iterators provided
- In Python 3.10> you can use a `strict` keyword to error if the length of iterators don't match

```{python}
firsts = ["Tyler", "Chandra"]
lasts = ["Hillery", "Hillery", "Hill"]

try:
    for z in zip(firsts, lasts, strict=True):
        print(z)
except Exception as e:
    print(e)
```

- The error doesn't occur until the end when the mismatch occurs because zip is lazily evaluated
- Interesting, you can use `zip` inside `dict` to make key,value pair of the iterators passed in

## Chaining comparison operators

- Pitfall to watch out for is chaining `!=` together. 

```{python}
a = c = 1
b = 2
if a != b != c:
    print("a, b, and c are all different: ", a, b, c)
```

- `a != b != c` really evaluates to `a != b` and `b != c` it doesn't tell you anything about a relates to c. Stick with chaining comparison operators on **transitive** operations

## Boolean short-circuiting

